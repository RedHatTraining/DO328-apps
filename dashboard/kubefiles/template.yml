apiVersion: v1
kind: Template
metadata:
  name: dashboard
  annotations:
    description: "A dashboard to keep track of connectivity for the exchange application"
objects:
  - apiVersion: networking.istio.io/v1alpha3
    kind: Gateway
    metadata:
      name: dashboard-gw
    spec:
      selector:
        istio: ingressgateway # use istio default controller
      servers:
      - port:
          number: 80
          name: http
          protocol: HTTP
        hosts:
        - "*"
  - apiVersion: networking.istio.io/v1alpha3
    kind: VirtualService
    metadata:
      name: dashboard-frontend-vservice
    spec:
      hosts:
      - "*"
      gateways:
      - dashboard-gw
      http:
      - match:
        - uri:
            prefix: /dashboard
        route:
        - destination:
            host: frontend
            port:
              number: 3000
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: frontend-cm
    data:
      GW_ADDR: ${INGRESS_GW}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: frontend
    spec:
      selector:
        matchLabels:
          app: frontend
      replicas: 1
      template:
        metadata:
          labels:
            app: frontend
          annotations:
            sidecar.istio.io/inject: "true"
        spec:
          containers:
            - name: frontend
              image: quay.io/redhattraining/ossm-dashboard-frontend:${FRONTEND_TAG}
              imagePullPolicy: Always
              ports:
                - containerPort: 3000
              env:
                - name: REACT_APP_GW_ENDPOINT
                  valueFrom:
                    configMapKeyRef:
                      name: frontend-cm
                      key: GW_ADDR
                - name: TARGET_PROJECT
                  value: ${TARGET_PROJECT}
                - name: HISTORY_SERVICE
                  value: ${HISTORY_SERVICE}
                - name: HISTORY_SERVICE_PORT
                  value: ${HISTORY_SERVICE_PORT}
                - name: CURRENCY_SERVICE
                  value: ${CURRENCY_SERVICE}
                - name: CURRENCY_SERVICE_PORT
                  value: ${CURRENCY_SERVICE_PORT}
                - name: EXCHANGE_SERVICE
                  values: ${EXCHANGE_SERVICE}
                - name: EXCHANGE_SERVICE_PORT
                  values: ${EXCHANGE_SERVICE_PORT}
                - name: FRONTEND_SERVICE
                  values: ${FRONTEND_SERVICE}
                - name: FRONTEND_SERVICE_PORT
                  values: ${FRONTEND_SERVICE_PORT}
  - kind: Service
    apiVersion: v1
    metadata:
      labels:
        app: frontend
      name: frontend
    spec:
      ports:
      - port: 3000
        protocol: TCP
        targetPort: 3000
      selector:
        app: frontend
  - kind: Deployment
    apiVersion: apps/v1
    metadata:
      name: backend
    spec:
      selector:
        matchLabels:
          app: backend
      replicas: 1
      template:
        metadata:
          labels:
            app: backend
          annotations:
              sidecar.istio.io/inject: "true"
        spec:
          containers:
            - name: history
              image: quay.io/redhattraining/ossm-dashboard-backend:${BACKEND_TAG}
              imagePullPolicy: Always
              ports:
                - containerPort: 8080
  - kind: Service
    apiVersion: v1
    metadata:
      labels:
        app: backend
      name: backend
    spec:
      ports:
      - port: 8080
        protocol: TCP
        targetPort: 8080
      selector:
        app: backend
  - apiVersion: networking.istio.io/v1alpha3
    kind: VirtualService
    metadata:
      name: dashboard-backend-vservice
    spec:
      hosts:
      - "*"
      gateways:
      - dashboard-gw
      http:
      - match:
        - uri:
            prefix: /backend/
        rewrite:
          uri: /
        route:
        - destination:
            host: backend
            port:
              number: 8080
parameters:
  - name: INGRESS_GW
    description: "The address of the Istio Ingress Gateway"
    required: true
  - name: FRONTEND_TAG
    description: "The tag of the image used to deploy the Frontend service"
    required: false
    value: "1.0"
  - name: BACKEND_TAG
    description: "The tag of the image used to deploy the Backend service"
    required: false
    value: "1.0"
  - name: TARGET_PROJECT
    description: "Project of the Exchange Application services"
    required: true
  - name: HISTORY_SERVICE
    description: "Name of the kubernetes service that leads to the History deployment"
    required: false
    value: "history"
  - name: HISTORY_SERVICE_PORT
    description: "Port for the history deployment"
    required: false
    value: "8080"
  - name: CURRENCY_SERVICE
    description: "Name of the kubernetes service that leads to the Currency deployment"
    required: false
    value: "currency"
  - name: CURRENCY_SERVICE_PORT
    description: "Port for the Currency deployment"
    required: false
    value: "5000"
  - name: EXCHANGE_SERVICE
    description: "Name of the kubernetes service that leads to the Exchange Gateway deployment"
    required: false
    value: "exchange"
  - name: EXCHANGE_SERVICE_PORT
    description: "Port for the Exchange Gateway deployment"
    required: false
    value: "8080"
  - name: FRONTEND_SERVICE
    description: "Name of the kubernetes service that leads to the Frontend deployment"
    required: false
    value: "frontend"
  - name: FRONTEND_SERVICE_PORT
    description: "Port for the Frontend deployment"
    required: false
    value: "3000"
